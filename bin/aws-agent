#!/usr/bin/env ruby
# Copyright (C) 2015-2017 Electronic Arts Inc.  All rights reserved.

require 'logger'
require 'socket'
require 'tmpdir'

require 'awsudo'

def usage
  warn <<EOS
Usage:

  #{File.basename $0}
EOS
  exit 1
end

LOG_FILENAME    = File.join(ENV['HOME'], ".aws-agent.log")
CONFIG_FILENAME = ENV['AWSUDO_CONFIGFILE'] ? ENV['AWSUDO_CONFIGFILE'] : File.join(ENV['HOME'], '.awsudo')
SUPPORTED_IDPS  = AWSUDO::IdentityProviders.constants

logger = Logger.new(LOG_FILENAME, "weekly")
logger.progname = "aws-agent"
logger.level = Logger::WARN

config = AWSUDO.load_config(CONFIG_FILENAME)
idpname = config['IDP'].to_s.capitalize.to_sym
unless SUPPORTED_IDPS.include?(idpname)
  warn "`#{config['IDP']}' is not a supported identity provider"
  exit 4
end
username, password = AWSUDO.ask_for_credentials
idp = AWSUDO::IdentityProviders.new(idpname, config, username, password)
idp.logger = logger

socket_dir  = Dir.mktmpdir("aws-")
socket_name = File.join(socket_dir, "agent")

case ENV['SHELL'].split('/').last
when 'csh', 'tcsh'
  puts "setenv AWS_AUTH_SOCK #{socket_name}"
when 'fish'
  puts "set -gx AWS_AUTH_SOCK #{socket_name}"
else
  puts "AWS_AUTH_SOCK=#{socket_name}; export AWS_AUTH_SOCK;"
end

Process.daemon
$0 = 'aws-agent'
Process.setrlimit(Process::RLIMIT_CORE, 0, 0)
UNIXServer.open(socket_name) do |socket|
  loop do
    Thread.new(socket.accept) do |client|
      logger.debug "Thread started"
      logger.debug {"connection accepted: #{socket.inspect}"}
      begin
        role_arn = client.gets.strip
        logger.debug {"role ARN received: #{role_arn}"}
        client.puts idp.assume_role(role_arn).to_json
      rescue => e
        logger.error e
        error = {:error => e}.to_json
        client.print error
      ensure
        logger.debug "Closing connection"
        client.close
        logger.debug "Connection closed"
      end
      logger.debug "Thread ending"
    end
  end
end

FileUtils.rmdir socket_dir
