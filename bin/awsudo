#!/usr/bin/env ruby
# Copyright (C) 2015-2017 Electronic Arts Inc.  All rights reserved.

require 'awsudo'

CONFIG_FILENAME = ENV['AWSUDO_CONFIGFILE'] ? ENV['AWSUDO_CONFIGFILE'] : File.join(ENV['HOME'], '.awsudo')
ROLES_FILENAME  = ENV['ROLES_CONFIGFILE'] ? ENV['ROLES_CONFIGFILE'] : File.join(ENV['HOME'], '.aws-roles')
SOCKETNAME      = ENV['AWS_AUTH_SOCK']
SUPPORTED_IDPS  = AWSUDO::IdentityProviders.constants

def usage
  warn <<-EOS
Usage:

  #{File.basename $0} {role-name | role-arn} command
  EOS
  exit 1
end

def find_role_arn(rolename)
  return nil if rolename =~ /\s/ || rolename.empty?
  line = File.readlines(ROLES_FILENAME).find do |line|
    line =~ /^#{rolename}\s+arn:aws:iam::\d+:role\/\S+\s*$/
  end
  return nil if line.nil?
  arn = line.split(/\s+/)[1]
  arn
end

def cuddle
  begin; yield; rescue; warn $!; end
end

usage if ARGV.size < 2

role = ARGV.shift
role_arn = role =~ /^arn:aws:iam::\d+:role\/\S+$/ ? role : find_role_arn(role)

if role_arn.nil?
  warn "`#{role}' is not a valid role"
  exit 2
end

keys = cuddle do
  AWSUDO.assume_role_with_agent(role_arn, SOCKETNAME) unless SOCKETNAME.nil?
end || cuddle do
  config = AWSUDO.load_config(CONFIG_FILENAME)
  idpname = config['IDP'].to_s.capitalize.to_sym
  unless SUPPORTED_IDPS.include?(idpname)
    raise "`#{config['IDP']}' is not a supported identity provider"
  end

  username, password = AWSUDO.ask_for_credentials
  idp = AWSUDO::IdentityProviders.new(idpname, config, username, password)
  idp.assume_role(role_arn)
end || exit(3)

%w(access_key_id secret_access_key session_token).each do |keyname|
  ENV['AWS_' + keyname.upcase] = keys[keyname] || keys[keyname.to_sym]
end

# for boto2
ENV['AWS_SECURITY_TOKEN'] = keys['session_token'] || keys[:session_token]

cuddle { exec *ARGV if ARGV.size > 0 }
